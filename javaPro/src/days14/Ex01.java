package days14;

/**
 * @author Bonggu
 * @date 2024. 1. 18.
 * @subject 클래스(class)
 * @content
 */
public class Ex01 {
	//멤버변수 (필드)
	public static int age = 10;
	String name;

	//멤버함수 (메서드)
	public static void main(String[] args) {
		
		/*
		 *  클래스에 선언된 변수 = 멤버변수
		 *  메서드에 선언된 변수 = 지역변수
		 *  1. 객체 지향적 프로그래밍
		 *   Object Oriented programming
		 *   줄여서 OOP
		 *   코딩(프로그래밍) 방법 (기법) 중 1가지
		 *   
		 *  완성된 프로그램 = 시작개체(Object) + 객체(Object) + 객체(Object) 
		 *  					  class 선언
		 *  					  {
		 *								main(){} // 기능, 함수, 메서드
		 *						  }
		 *   
		 *   예 ) 컴퓨터 조립 == 프로그램
		 *       - 돈
		 *       - 하고자 하는 목적(게임)에 맞춰 컴퓨터의 구성품 구매
		 *       - 가격비교 사이트에서 주문
		 *       - 컴퓨터 구성품(부품) == 객체들
		 *       - 컴퓨터 조립
		 *       - 테스트
		 *       - 사용
		 *    > 생산성 향상. 유지 보수 용이.
		 *        
		 *  2. OOP 특징 == 클래스의 특징 - 각 특징을 설명할 수 있어야 한다
		 *     1) 캡슐화
		 *     2) 은닉화
		 *     3) 상속성
		 *     4) 다형성
		 *     5) 추상화  
		 *   
		 *  3. 			클래스			= 객체(물건, 인스터스)를 만들기 위한 설계도
		 *  4. 			객체			= 클래스로 실제 생산된 것. 존재하는 것.
		 *				  						사물(유형) 또는 개념(무형)이 객체가 될 수 있다.
		 *  5. 인스턴스(Instance) 	= 생성된 객체
		 *  6. 인스턴스화 = 클래스(설계도)를 가지고 객체(집)를 생성하는 과정
		 *  7. 클래스를 설계하는 과정
		 *     1) 객체의 구성 요소 (속성,기능) 파악 - 목록 작성
		 *     2) 클래스 선언
		 *         - 형식 : [접근지정자] [기타제어자] class 클래스(식별자)명
		 *                       [extends Super 클래스][implements 인터페이스... ] { }
		 *                       
		 *                       위의 모든 것들을 클래스의 '멤버' 라고 부른다 (== 객체의 구성 요소)
		 *                       1) 속성(특징) - 멤버변수 (클래스 안에 선언된 변수) =필드 field
		 *							  - 형식 : [접근지정자][기타제어자] 자료형 변수명 [=초기값];
		 *                       2) 기능 function(함수) - 멤버함수 (== 메서드(method)
		 *     3) 객체 생성 - 테스트
		 *     4) 문제점 파악 - 유지, 보수
		 *     5) 상용화 - 배포
		 *     6) 버전 관리 - 기능 추가, 수정(보완)
		 *     
		 *     ex) 망치
		 *          - 용도 		: 가정용 망치
		 *          - 기능			: 못 치기, 못 빼기
		 *          - 가격(비용)	: 1백만원 ?
		 *          - 특징			: 가로, 세로
		 *             int width;
		 *             int height;
		 *             
		 *   
		 *   실습) Tv 클래스 선언, 객체 생성 사용 예시
		 *        1. 목록 작성 (어떤 어떤 기능들이 필요할지)
		 *        2. 클래스 선언
		 * 
		 * */

	}

}
